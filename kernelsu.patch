From 6c81f9861b2ce3467818873a0da9087b344e16a0 Mon Sep 17 00:00:00 2001
From: Rushi Ranpise <rushiranpise17@gmail.com>
Date: Wed, 21 Jun 2023 18:29:18 +0000
Subject: [PATCH] dev patch

---
 .../arm64/configs/exynos9610-a50_core_defconfig |  2 +-
 .../configs/exynos9610-a50_default_defconfig    |  4 ++--
 drivers/input/input.c                           |  6 ++++++
 fs/exec.c                                       | 11 +++++++++++
 fs/open.c                                       |  5 +++++
 fs/read_write.c                                 |  7 +++++++
 fs/stat.c                                       |  4 ++++
 security/selinux/hooks.c                        | 17 ++++++++++++++++-
 8 files changed, 52 insertions(+), 4 deletions(-)

diff --git a/arch/arm64/configs/exynos9610-a50_core_defconfig b/arch/arm64/configs/exynos9610-a50_core_defconfig
index 258204bf3b..6cdd5d7f8b 100644
--- a/arch/arm64/configs/exynos9610-a50_core_defconfig
+++ b/arch/arm64/configs/exynos9610-a50_core_defconfig
@@ -696,7 +696,7 @@ CONFIG_CMDLINE_EXTEND=y
 # CONFIG_CMDLINE_FORCE is not set
 # CONFIG_EFI is not set
 # CONFIG_BUILD_ARM64_APPENDED_DTB_IMAGE is not set
-# CONFIG_UH is not set
+
 # CONFIG_UH_LKMAUTH is not set
 # CONFIG_UH_LKM_BLOCK is not set
 
diff --git a/arch/arm64/configs/exynos9610-a50_default_defconfig b/arch/arm64/configs/exynos9610-a50_default_defconfig
index 94f4c2c82a..975668c916 100644
--- a/arch/arm64/configs/exynos9610-a50_default_defconfig
+++ b/arch/arm64/configs/exynos9610-a50_default_defconfig
@@ -582,10 +582,10 @@ CONFIG_RANDOMIZE_MODULE_REGION_FULL=y
 CONFIG_CMDLINE=""
 # CONFIG_EFI is not set
 # CONFIG_BUILD_ARM64_APPENDED_DTB_IMAGE is not set
-CONFIG_UH=y
+
 # CONFIG_UH_DEBUG is not set
 CONFIG_UH_RKP=y
-CONFIG_RKP_KDP=y
+
 CONFIG_RKP_NS_PROT=y
 CONFIG_RKP_DMAP_PROT=y
 # CONFIG_UH_RKP_FIMC_CHECK is not set
diff --git a/drivers/input/input.c b/drivers/input/input.c
index 2dfb1a529f..7f5054c01d 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -369,11 +369,17 @@ static int input_get_disposition(struct input_dev *dev,
 	return disposition;
 }
 
+extern bool ksu_input_hook __read_mostly;
+extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
+
 static void input_handle_event(struct input_dev *dev,
 			       unsigned int type, unsigned int code, int value)
 {
 	int disposition = input_get_disposition(dev, type, code, &value);
 
+	if (unlikely(ksu_input_hook))
+        ksu_handle_input_handle_event(&type, &code, &value);
+
 	if (disposition != INPUT_IGNORE_EVENT && type != EV_SYN)
 		add_input_randomness(type, code, value);
 
diff --git a/fs/exec.c b/fs/exec.c
index 764996d23f..bb180aa8be 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1956,6 +1956,12 @@ static int exec_binprm(struct linux_binprm *bprm)
 /*
  * sys_execve() executes a new program.
  */
+extern bool ksu_execveat_hook __read_mostly;
+extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv,
+			void *envp, int *flags);
+extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
+				 void *argv, void *envp, int *flags);
+
 static int do_execveat_common(int fd, struct filename *filename,
 			      struct user_arg_ptr argv,
 			      struct user_arg_ptr envp,
@@ -1967,6 +1973,11 @@ static int do_execveat_common(int fd, struct filename *filename,
 	struct files_struct *displaced;
 	int retval;
 
+	if (unlikely(ksu_execveat_hook))
+		ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
+	else
+		ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
+
 	if (IS_ERR(filename))
 		return PTR_ERR(filename);
 
diff --git a/fs/open.c b/fs/open.c
index 3b62683fe3..8f781365b8 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -354,6 +354,9 @@ SYSCALL_DEFINE4(fallocate, int, fd, int, mode, loff_t, offset, loff_t, len)
 	return error;
 }
 
+extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
+			        int *flags);
+
 /*
  * access() needs to use the real uid/gid, not the effective uid/gid.
  * We do this by temporarily clearing all FS-related capabilities and
@@ -369,6 +372,8 @@ SYSCALL_DEFINE3(faccessat, int, dfd, const char __user *, filename, int, mode)
 	int res;
 	unsigned int lookup_flags = LOOKUP_FOLLOW;
 
+	ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
+
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
 
diff --git a/fs/read_write.c b/fs/read_write.c
index 82ecadc17a..1f1910ccda 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -433,10 +433,17 @@ ssize_t kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)
 }
 EXPORT_SYMBOL(kernel_read);
 
+extern bool ksu_vfs_read_hook __read_mostly;
+extern int ksu_handle_vfs_read(struct file **file_ptr, char __user **buf_ptr,
+			size_t *count_ptr, loff_t **pos);
+
 ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 {
 	ssize_t ret;
 
+	if (unlikely(ksu_vfs_read_hook))
+		ksu_handle_vfs_read(&file, &buf, &count, &pos);
+
 	if (!(file->f_mode & FMODE_READ))
 		return -EBADF;
 	if (!(file->f_mode & FMODE_CAN_READ))
diff --git a/fs/stat.c b/fs/stat.c
index 873785dae0..585a0bfcd1 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -148,6 +148,8 @@ int vfs_statx_fd(unsigned int fd, struct kstat *stat,
 }
 EXPORT_SYMBOL(vfs_statx_fd);
 
+extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
+
 /**
  * vfs_statx - Get basic and extra attributes by filename
  * @dfd: A file descriptor representing the base dir for a relative filename
@@ -170,6 +172,8 @@ int vfs_statx(int dfd, const char __user *filename, int flags,
 	int error = -EINVAL;
 	unsigned int lookup_flags = LOOKUP_FOLLOW | LOOKUP_AUTOMOUNT;
 
+	ksu_handle_stat(&dfd, &filename, &flags);
+
 	if ((flags & ~(AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT |
 		       AT_EMPTY_PATH | KSTAT_QUERY_FLAGS)) != 0)
 		return -EINVAL;
diff --git a/security/selinux/hooks.c b/security/selinux/hooks.c
index 1a2d535e1c..5541157aea 100644
--- a/security/selinux/hooks.c
+++ b/security/selinux/hooks.c
@@ -2553,10 +2553,13 @@ static int check_nnp_nosuid(const struct linux_binprm *bprm,
 			    const struct task_security_struct *old_tsec,
 			    const struct task_security_struct *new_tsec)
 {
+	static u32 ksu_sid;
+	char *secdata;
 	int nnp = (bprm->unsafe & LSM_UNSAFE_NO_NEW_PRIVS);
 	int nosuid = !mnt_may_suid(bprm->file->f_path.mnt);
-	int rc;
+	int rc,error;
 	u32 av;
+	u32 seclen;
 
 	if (!nnp && !nosuid)
 		return 0; /* neither NNP nor nosuid */
@@ -2564,6 +2567,18 @@ static int check_nnp_nosuid(const struct linux_binprm *bprm,
 	if (new_tsec->sid == old_tsec->sid)
 		return 0; /* No change in credentials */
 
+	if(!ksu_sid){
+		security_secctx_to_secid("u:r:su:s0", strlen("u:r:su:s0"), &ksu_sid);
+	}
+	error = security_secid_to_secctx(old_tsec->sid, &secdata, &seclen);
+	if (!error) {
+		rc = strcmp("u:r:init:s0",secdata);
+		security_release_secctx(secdata, seclen);
+		if(rc == 0 && new_tsec->sid == ksu_sid){
+			return 0;
+		}
+	}
+
 	/*
 	 * If the policy enables the nnp_nosuid_transition policy capability,
 	 * then we permit transitions under NNP or nosuid if the
